
package purchaseordermanagementsystem;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class AddPR_GUI extends javax.swing.JFrame {
    
    private SaleManager saleManager;
    private String[] supplierIDList = getSupplierIDList();
    
    public AddPR_GUI(SaleManager saleManager) {
        
        this.saleManager=saleManager;
        setTitle("Sale Manager - Add Purchase Requisition");
        initComponents();
        setLocationRelativeTo(null);
        SupplierComboBox.setModel(new DefaultComboBoxModel<>(supplierIDList));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();
        SupplierComboBox = new javax.swing.JComboBox<>();
        QuantityText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        addToPRButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ItemListTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        SelectedItemIDText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        requestDateText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        jLabel2.setText("Select Supplier");

        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Category", "Unit Price", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ItemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ItemTable);

        SupplierComboBox.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        SupplierComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SupplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupplierComboBoxActionPerformed(evt);
            }
        });

        QuantityText.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        jLabel3.setText("Enter Item Quantity: ");

        jLabel5.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        jLabel5.setText("Select Item: ");

        addToPRButton.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        addToPRButton.setText("Add into List");
        addToPRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToPRButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        ItemListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ItemListTable);

        jLabel6.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        jLabel6.setText("Item List in This Purchase Requisition: ");

        jLabel7.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel7.setText("Add Purchase Requisition");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        SelectedItemIDText.setEditable(false);
        SelectedItemIDText.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        jLabel8.setText("Selected Item ID: ");

        jLabel9.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        jLabel9.setText("Request Date: ");

        requestDateText.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Bodoni MT", 0, 15)); // NOI18N
        jLabel10.setText("DD-MM-YYYY");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SupplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(SelectedItemIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(QuantityText, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(33, 33, 33)
                                .addComponent(addToPRButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(backButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(requestDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(38, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addGap(222, 222, 222))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(325, 325, 325)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(requestDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SupplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SelectedItemIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(QuantityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(addToPRButton))
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saveButton)
                        .addGap(27, 27, 27))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(ItemListTable.getRowCount()>0){
            if(requestDateText.getText().isBlank()){
                JOptionPane.showMessageDialog(null, "Please Enter Date");
            }
            else if(!requestDateText.getText().isBlank() && !InputValidation.isValidDate(requestDateText.getText()))
                JOptionPane.showMessageDialog(null, "Please Enter Correct Date Format");
            else{
                DefaultTableModel model = (DefaultTableModel) ItemListTable.getModel();
                ItemLine[] itemList = new ItemLine[ItemListTable.getRowCount()];

                // Get table Data
                for(int i=0; i< ItemListTable.getRowCount();i++){
                    String ItemID = model.getValueAt(i, 0).toString();
                    Item item = saleManager.checkItemInfo(ItemID);
                    String itemQuantity = model.getValueAt(i, 2).toString();
                    ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
                    itemList[i]=itemLine;
                }


                // Get PR info
                double grandTotalPrice = ItemLine.calculateGrandTotalPrice(itemList);
                String supplierID = supplierIDList[SupplierComboBox.getSelectedIndex()];
                String newPurchaseRequisitionID = saleManager.generatePRID();
                String requestDate = requestDateText.getText();

                PurchaseRequisition newPR = new PurchaseRequisition(newPurchaseRequisitionID,saleManager.getSM_ID(),supplierID,requestDate,grandTotalPrice,"Pending",itemList);
                newPR.addPurchaseRequisition();    

                removeItemListTableRow();
                SupplierComboBox.setEnabled(true);  
            }        
        }
        else{
                JOptionPane.showMessageDialog(null, "Please Add Item First");
        }
        
    }//GEN-LAST:event_saveButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        ManagePR_GUI managePRGUI = new ManagePR_GUI(saleManager);
        managePRGUI.show();
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void SupplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupplierComboBoxActionPerformed
        if (SupplierComboBox.getSelectedIndex()!=-1){
            String filterTarget = supplierIDList[SupplierComboBox.getSelectedIndex()];
            FileManager filterSupplier = new FileManager("Item.txt");
            ArrayList<String[]> SupplierItem = filterSupplier.filterData(5, filterTarget);
            removeItemTableRow();
            displayItemTable(SupplierItem);     
        }       
    }//GEN-LAST:event_SupplierComboBoxActionPerformed

    private void ItemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
        int selectedRowIndex = ItemTable.getSelectedRow();
        String SelectedItemID = model.getValueAt(selectedRowIndex, 0).toString();
        SelectedItemIDText.setText(SelectedItemID);
    }//GEN-LAST:event_ItemTableMouseClicked

    private void addToPRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToPRButtonActionPerformed
        if(QuantityText.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Please Enter Quantity");
        }
        else if(!QuantityText.getText().isBlank() && !InputValidation.checkValidQuantity(QuantityText.getText())){
            JOptionPane.showMessageDialog(null, "Invalid Quantity");
        }
        else{
            SupplierComboBox.setEnabled(false);  
            String SelectedItemID = SelectedItemIDText.getText();// GUI input
            Item selectedItem = saleManager.checkItemInfo(SelectedItemID); // check database
            int itemQuantity = Integer.parseInt(QuantityText.getText()); //GUI input

            if(checkDuplicate(SelectedItemID)){
                JOptionPane.showMessageDialog(null, "Item already added");
            }
            else{
                ItemLine itemLine =  new ItemLine(itemQuantity,selectedItem);
                String[] itemRow = itemLine.toString().split("\\|"); // converter& calculation

                DefaultTableModel model = (DefaultTableModel) ItemListTable.getModel();//GUI control
                model.addRow(itemRow); // GUI output    
            }
        }
    }//GEN-LAST:event_addToPRButtonActionPerformed

    ///// Custom Code
    // return true if duplicate
    private boolean checkDuplicate(String itemIDTarget){
        DefaultTableModel model = (DefaultTableModel) ItemListTable.getModel();
        ItemLine[] itemList = new ItemLine[ItemListTable.getRowCount()];
            
        // Get table Data
        for(int i=0; i< ItemListTable.getRowCount();i++){
            String ItemID = model.getValueAt(i, 0).toString();
            Item item = saleManager.checkItemInfo(ItemID);
            String itemQuantity = model.getValueAt(i, 2).toString();
            ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
            itemList[i]=itemLine;
        }
        
        for(ItemLine item:itemList){
            if(item.getItem().getItemCode().equals(itemIDTarget)){
                return true;
            }
        }
        return false;
    }
    
    private String[] getSupplierIDList(){
        FileManager getrow = new FileManager("Supplier.txt");
        ArrayList<String> rows =  getrow.readFile();
        String[] supplierIDList = new String[rows.size()+1];
        supplierIDList[0] = null;
        for(int i=0 ; i< rows.size();i++){
            String line = rows.get(i).toString();
            String[] data = line.split("\\|");
            supplierIDList[i+1]=data[0];
        }
        return supplierIDList;
    }
    
    public void displayItemTable(){
        DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
        FileManager getrow = new FileManager("Item.txt");
        ArrayList<String> rows =  getrow.readFile();
        for(int i=0 ; i< rows.size();i++){
            String line = rows.get(i).toString();
            String[] data = line.split("\\|");
            String[] selectedData = Arrays.copyOf(data, 5);
            model.addRow(selectedData);
        } 
    }
    
    public void displayItemTable(ArrayList<String[]> ItemData){
        DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
        for(int i =0;i<ItemData.size();i++){
            String[] selectedData = Arrays.copyOf(ItemData.get(i), 5);
            model.addRow(selectedData);
        }
    }   
    
    public void removeItemTableRow(){
        DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
        int count = model.getRowCount();
        for (int i = count - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    
    public void removeItemListTableRow(){
        DefaultTableModel model = (DefaultTableModel) ItemListTable.getModel();
        int count = model.getRowCount();
        for (int i = count - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AddPR_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ItemListTable;
    private javax.swing.JTable ItemTable;
    private javax.swing.JTextField QuantityText;
    private javax.swing.JTextField SelectedItemIDText;
    private javax.swing.JComboBox<String> SupplierComboBox;
    private javax.swing.JButton addToPRButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField requestDateText;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
