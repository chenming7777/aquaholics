package purchaseordermanagementsystem;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class EditPR_GUI extends javax.swing.JFrame {

    private Administrator admin;
    private SaleManager saleManager;
    private PurchaseManager purchaseManager;
    private PurchaseRequisition PR;
    
    public EditPR_GUI(SaleManager saleManager, PurchaseRequisition PR) {
        this.saleManager=saleManager;
        this.PR = PR;
        setTitle("Sale Manager - Edit Purchase Requisition");
        initComponents();
        setLocationRelativeTo(null);
        supplierText.setText(PR.getSupplier().getSupplierID());
        PRIDText.setText(PR.getPurchaseRequisitionID());
        requestDateText.setText(PR.getRequestDate());
        displayItemListTable();
        displaySupplierItemTable(PR.getSupplier().getSupplierID());
    }
    
    public EditPR_GUI(Administrator admin, PurchaseRequisition PR) {
        this.admin = admin;
        this.PR = PR;
        setTitle("Admin - View Purchase Requisition");
        initComponents();
        setLocationRelativeTo(null);
        supplierText.setText(PR.getSupplier().getSupplierID());
        PRIDText.setText(PR.getPurchaseRequisitionID());
        requestDateText.setText(PR.getRequestDate());
        displayItemListTable();
        displaySupplierItemTable(PR.getSupplier().getSupplierID());
        PRLabel.setText("Item in Purchase Requisition");
        dateLabel.setVisible(false);
        requestDateText.setVisible(false);
        supplierLabel.setVisible(false);
        supplierItemTable.setVisible(false);
        quantityLabel.setVisible(false);
        quantityText.setVisible(false);
        editButton.setVisible(false);
        addItemButton.setVisible(false);
        DeleteLineButton.setVisible(false);
        jScrollPane3.setVisible(false);
        saveButton.setVisible(false);
    }
    
    public EditPR_GUI(PurchaseManager purchaseManager, PurchaseRequisition PR) {
        this.purchaseManager = purchaseManager;
        this.PR = PR;
        setTitle("Purchase Manager - View Purchase Requisition");
        initComponents();
        setLocationRelativeTo(null);
        supplierText.setText(PR.getSupplier().getSupplierID());
        PRIDText.setText(PR.getPurchaseRequisitionID());
        requestDateText.setText(PR.getRequestDate());
        displayItemListTable();
        displaySupplierItemTable(PR.getSupplier().getSupplierID());
        PRLabel.setText("Item in Purchase Requisition");
        backButton.setText("PR List");
        dateLabel.setVisible(false);
        requestDateText.setVisible(false);
        supplierLabel.setVisible(false);
        supplierItemTable.setVisible(false);
        quantityLabel.setVisible(false);
        quantityText.setVisible(false);
        editButton.setVisible(false);
        addItemButton.setVisible(false);
        DeleteLineButton.setVisible(false);
        jScrollPane3.setVisible(false);
        saveButton.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemListTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        supplierItemTable = new javax.swing.JTable();
        quantityText = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        supplierLabel = new javax.swing.JLabel();
        supplierText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        PRIDText = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        PRLabel = new javax.swing.JLabel();
        DeleteLineButton = new javax.swing.JButton();
        addItemButton = new javax.swing.JButton();
        requestDateText = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        itemListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemListTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(itemListTable);

        jLabel6.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        jLabel6.setText("Item List in This Purchase Requisition: ");

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        supplierItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Stock", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(supplierItemTable);

        quantityLabel.setFont(new java.awt.Font("Bodoni MT", 0, 14)); // NOI18N
        quantityLabel.setText("Enter Item Quantity: ");

        supplierLabel.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        supplierLabel.setText("Select to Add Item from Supplier: ");

        supplierText.setEditable(false);
        supplierText.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        jLabel4.setText("Supplier: ");

        jLabel7.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        jLabel7.setText("PR ID:");

        PRIDText.setEditable(false);
        PRIDText.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N

        backButton.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        PRLabel.setFont(new java.awt.Font("Bodoni MT", 1, 24)); // NOI18N
        PRLabel.setText("Edit Purchase Requisition");

        DeleteLineButton.setText("Delete Line");
        DeleteLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteLineButtonActionPerformed(evt);
            }
        });

        addItemButton.setText("Add Item");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        requestDateText.setEditable(false);
        requestDateText.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N

        dateLabel.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        dateLabel.setText("Request Date: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(DeleteLineButton)
                        .addGap(88, 88, 88)
                        .addComponent(saveButton))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(PRLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(PRIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(66, 66, 66)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(supplierText, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(requestDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(quantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(quantityText, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(supplierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(53, 53, 53)
                            .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(43, 43, 43))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateLabel)
                        .addComponent(requestDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(backButton)
                        .addComponent(PRLabel)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(PRIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(supplierText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeleteLineButton)
                            .addComponent(saveButton))
                        .addContainerGap(18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(supplierLabel)
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editButton)
                            .addComponent(addItemButton))
                        .addGap(37, 37, 37))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // Get table data
        if(itemListTable.getRowCount()>0){
            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            ItemLine[] itemList = new ItemLine[itemListTable.getRowCount()];
            for(int i=0; i< itemListTable.getRowCount();i++){
                String ItemID = model.getValueAt(i, 0).toString();
                Item item = saleManager.checkItemInfo(ItemID);
                String itemQuantity = model.getValueAt(i, 2).toString();
                ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
                itemList[i]=itemLine;
            }
            double grandTotalPrice = ItemLine.calculateGrandTotalPrice(itemList);

            PurchaseRequisition newPR = new PurchaseRequisition(PR.getPurchaseRequisitionID(),PR.getSaleManager(),PR.getSupplier(),PR.getRequestDate(),grandTotalPrice,PR.getPurchaseRequisitionStatus(),itemList);
            PR.editPurchaseRequisition(newPR);

            ManagePR_GUI managePRGUI = new ManagePR_GUI(saleManager);
            managePRGUI.show();
            dispose();
        }
        else{
            JOptionPane.showMessageDialog(null, "Edit item list cannot be empty");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (admin == null && saleManager != null && purchaseManager == null){
        
            ManagePR_GUI managePRGUI = new ManagePR_GUI(saleManager);
            managePRGUI.show();
            dispose();
        }
        else if (admin != null && saleManager == null && purchaseManager == null){
            ManagePR_GUI managePRGUI = new ManagePR_GUI(admin);
            managePRGUI.show();
            dispose();
        }
        else if (admin == null && saleManager == null && purchaseManager != null){
            ManagePR_GUI managePRGUI = new ManagePR_GUI(purchaseManager);
            managePRGUI.show();
            dispose();
        
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void DeleteLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteLineButtonActionPerformed
        if(itemListTable.getSelectedRow()!=-1){
            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            int selectedRowIndex = itemListTable.getSelectedRow();
            String SelectedItemID = model.getValueAt(selectedRowIndex, 0).toString();
            ItemLine[] itemList = new ItemLine[itemListTable.getRowCount()];

            // Get table Data
            for(int i=0; i< itemListTable.getRowCount();i++){
                String ItemID = model.getValueAt(i, 0).toString();
                Item item = saleManager.checkItemInfo(ItemID);
                String itemQuantity = model.getValueAt(i, 2).toString();
                ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
                itemList[i]=itemLine;
            }
            // Remove from the itemListTable
            removeItemListTableRow();
            for(ItemLine itemData:itemList){
                if(!itemData.getItem().getItemCode().equals(SelectedItemID)){
                    String[] tableRow = itemData.toString().split("\\|");
                    model.addRow(tableRow);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select and Remove");
        }
    }//GEN-LAST:event_DeleteLineButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        if(!quantityText.getText().isBlank()){
            if(InputValidation.checkValidQuantity(quantityText.getText())){
                DefaultTableModel SITmodel = (DefaultTableModel) supplierItemTable.getModel();
                String SelectedItemID = SITmodel.getValueAt(supplierItemTable.getSelectedRow(), 0).toString();// GUI input
                Item selectedItem = saleManager.checkItemInfo(SelectedItemID); // check database
                int itemQuantity = Integer.parseInt(quantityText.getText()); //GUI input

                if(checkDuplicate(SelectedItemID)){
                    JOptionPane.showMessageDialog(null, "Item already added");
                }
                else{
                    ItemLine itemLine =  new ItemLine(itemQuantity,selectedItem);
                    String[] itemRow = itemLine.toString().split("\\|"); // converter& calculation

                    DefaultTableModel ILTmodel = (DefaultTableModel) itemListTable.getModel();//GUI control
                    ILTmodel.addRow(itemRow); // GUI output    
                }
            }
            else{
                JOptionPane.showMessageDialog(null,"Please Enter Correct Quantity");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Enter Quantity");
        }
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if(itemListTable.getSelectedRow()!=-1){
            if(!quantityText.getText().isBlank()){
                if(InputValidation.checkValidQuantity(quantityText.getText())){
                    String newQuantity  = quantityText.getText();

                    DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
                    int selectedRowIndex = itemListTable.getSelectedRow();
                    String SelectedItemID = model.getValueAt(selectedRowIndex, 0).toString();
                    ItemLine[] itemList = new ItemLine[itemListTable.getRowCount()];

                    // Get table Data & edit
                    for(int i=0; i< itemListTable.getRowCount();i++){
                        String ItemID = model.getValueAt(i, 0).toString();
                        Item item = saleManager.checkItemInfo(ItemID);
                        String itemQuantity = model.getValueAt(i, 2).toString();
                        if(item.getItemCode().equals(SelectedItemID)){
                            itemQuantity = newQuantity;
                        }
                        ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
                        itemList[i]=itemLine;
                    }

                    // Remove from the itemListTable
                    removeItemListTableRow();
                    for(ItemLine itemData:itemList){
                        String[] tableRow = itemData.toString().split("\\|");
                        model.addRow(tableRow);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Invalid Quantity");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Enter valid Quantity");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select item to edit");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void itemListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemListTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        int selectedRowIndex = itemListTable.getSelectedRow();
        String SelectedQuantity = model.getValueAt(selectedRowIndex, 2).toString();
        
        quantityText.setText(SelectedQuantity);
    }//GEN-LAST:event_itemListTableMouseClicked

    // custom code
    private boolean checkDuplicate(String itemIDTarget){
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        ItemLine[] itemList = new ItemLine[itemListTable.getRowCount()];
            
        // Get table Data
        for(int i=0; i< itemListTable.getRowCount();i++){
            String ItemID = model.getValueAt(i, 0).toString();
            Item item = saleManager.checkItemInfo(ItemID);
            String itemQuantity = model.getValueAt(i, 2).toString();
            ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
            itemList[i]=itemLine;
        }
        
        for(ItemLine item:itemList){
            if(item.getItem().getItemCode().equals(itemIDTarget)){
                return true;
            }
        }
        return false;
    }
    public void displayItemListTable(){
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        ItemLine[] itemList = PR.getItemList();
        for(ItemLine itemData:itemList){
            String[] tableRow = itemData.toString().split("\\|");
            model.addRow(tableRow);
        }
    }
    
    public void displaySupplierItemTable(String SupplierID){
        DefaultTableModel model = (DefaultTableModel) supplierItemTable.getModel();
        FileManager file = new FileManager("Item.txt");
        ArrayList<String[]> rows =  file.filterData(5, SupplierID);
        removeSupplierListTableRow();
        for(int i =0;i<rows.size();i++){
            String[] selectedData = Arrays.copyOf(rows.get(i), 5);
            model.addRow(selectedData);
        }
    }
    public void removeSupplierListTableRow(){
        DefaultTableModel model = (DefaultTableModel) supplierItemTable.getModel();
        int count = model.getRowCount();
        for (int i = count - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    
    public void removeItemListTableRow(){
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        int count = model.getRowCount();
        for (int i = count - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }  
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new EditPR_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteLineButton;
    private javax.swing.JTextField PRIDText;
    private javax.swing.JLabel PRLabel;
    private javax.swing.JButton addItemButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton editButton;
    private javax.swing.JTable itemListTable;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityText;
    private javax.swing.JTextField requestDateText;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable supplierItemTable;
    private javax.swing.JLabel supplierLabel;
    private javax.swing.JTextField supplierText;
    // End of variables declaration//GEN-END:variables
}
