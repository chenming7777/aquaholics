package purchaseordermanagementsystem;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class ManageItem_GUI extends javax.swing.JFrame {
    private DefaultTableModel itemtable = new DefaultTableModel();
    private String [] itemColumn = {"Item Code","Item Name","Item Category","Item Unit Price","Quantity","Item Supplier ID"};
    private String[] itemCategories = {null,"Vegetable","Fruit","Meat","Dairy","Snacks","Beverages","Others"};
    private String[] supplierIDList = getSupplierIDFromFile();
    private SaleManager saleManager;
    private PurchaseManager purchaseManager;
    private Administrator admin;
    /**
     * Creates new form ViewItem_GUI
     */
    //Constructor overloading
    public ManageItem_GUI(SaleManager saleManager) {
        this.saleManager  = saleManager;
        setTitle("Sale Manager - Manage Item");
        initComponents();
        setLocationRelativeTo(null);
        supplierIDList[0] = "All";
        categoryComboBox.setModel(new DefaultComboBoxModel<>(itemCategories));
        SupplierComboBox.setModel(new DefaultComboBoxModel<>(supplierIDList));
        displayTable();
    }
    
    public ManageItem_GUI(PurchaseManager purchaseManager) {
        this.purchaseManager  = purchaseManager;
        setTitle("Purchase Manager - View Item");
        initComponents();
        setLocationRelativeTo(null);
        supplierIDList[0] = "All";
        categoryComboBox.setModel(new DefaultComboBoxModel<>(itemCategories));
        SupplierComboBox.setModel(new DefaultComboBoxModel<>(supplierIDList));
        displayTable();
        
        addButton.setVisible(false);
        editButton.setVisible(false);
        removeButton.setVisible(false);
        manageItemLabel.setText("View Item");
    }
    
    public ManageItem_GUI(Administrator admin) {
        this.admin = admin;
        setTitle("Administrator - View Item");
        initComponents();
        setLocationRelativeTo(null);
        supplierIDList[0] = "All";
        categoryComboBox.setModel(new DefaultComboBoxModel<>(itemCategories));
        SupplierComboBox.setModel(new DefaultComboBoxModel<>(supplierIDList));
        displayTable();
        
        addButton.setVisible(false);
        editButton.setVisible(false);
        removeButton.setVisible(false);
        manageItemLabel.setText("View Item");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        categoryComboBox = new javax.swing.JComboBox<>();
        searchText = new javax.swing.JTextField();
        manageItemLabel = new javax.swing.JLabel();
        SupplierComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemID", "Name", "Category", "Price", "Quantity", "SupplierID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemTable);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Bodoni MT", 0, 14)); // NOI18N
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Bodoni MT", 0, 14)); // NOI18N
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Bodoni MT", 0, 14)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        findButton.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        categoryComboBox.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchText.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N

        manageItemLabel.setFont(new java.awt.Font("Bodoni MT", 1, 24)); // NOI18N
        manageItemLabel.setText("Manage Item");

        SupplierComboBox.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        SupplierComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SupplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupplierComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        jLabel1.setText("Supplier:");

        jLabel2.setFont(new java.awt.Font("Bodoni MT", 0, 16)); // NOI18N
        jLabel2.setText("Category");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(55, 55, 55)
                        .addComponent(manageItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(474, 474, 474))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SupplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(85, 85, 85)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(addButton)
                                .addGap(40, 40, 40)
                                .addComponent(removeButton)
                                .addGap(40, 40, 40)
                                .addComponent(editButton)
                                .addGap(61, 61, 61)))
                        .addGap(61, 61, 61))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(findButton)
                        .addGap(103, 103, 103))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backButton)
                    .addComponent(manageItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findButton)
                            .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SupplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(removeButton)
                    .addComponent(addButton))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (admin != null && saleManager == null && purchaseManager == null){
            Admin_GUI adminGUI = new Admin_GUI(admin);
            adminGUI.show();
            dispose();
        }
        else if (admin == null && saleManager != null && purchaseManager == null){
            SaleManager_GUI saleManagerGUI = new SaleManager_GUI(saleManager);
            saleManagerGUI.show();
            dispose();
        }
        else if (admin == null && saleManager == null && purchaseManager != null){
            PurchaseManager_GUI purchaseManagerGUI = new PurchaseManager_GUI(purchaseManager);
            purchaseManagerGUI.show();
            dispose();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddItem_GUI addItemGUI = new AddItem_GUI(saleManager);
        addItemGUI.show();
        dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int indexRow = itemTable.getSelectedRow();
        TableModel model = itemTable.getModel();
        String[] tableData = new String[itemTable.getColumnCount()];
        for(int i=0; i<itemTable.getColumnCount();i++){
            String data = model.getValueAt(indexRow, i).toString();
            tableData[i]=data;
        }
        double itemUnitPrice = Double.valueOf(tableData[3]);
        int itemStock = Integer.valueOf(tableData[4]);

        Item item = new Item(tableData[0],tableData[1],tableData[2],itemUnitPrice,itemStock,tableData[5]);
        saleManager.manageItem("remove", item, item);
        this.removeTableRow();
        this.displayTable();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        int indexRow = itemTable.getSelectedRow();
        TableModel model = itemTable.getModel();
        String[] tableData = new String[itemTable.getColumnCount()];
        for(int i=0; i<itemTable.getColumnCount();i++){
            String data = model.getValueAt(indexRow, i).toString();
            tableData[i]=data;
        }
        EditItem_GUI editItemGUI = new EditItem_GUI(saleManager,tableData);
        editItemGUI.show();
        dispose();
    }//GEN-LAST:event_editButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        String filterTarget=null; 
        if(categoryComboBox.getSelectedIndex()==-1){
            filterTarget = null;
        }
        else{
            filterTarget = itemCategories[categoryComboBox.getSelectedIndex()];
        }
        String searchTarget = searchText.getText();
        //  All
        if (searchTarget.isBlank() && filterTarget==null){
            removeTableRow();
            displayTable();
        }
        // filter
        else if(searchTarget.isBlank() && filterTarget !=null){
            FileManager file = new FileManager("Item.txt");
            ArrayList<String[]> searchList = file.filterData(2, filterTarget);
            removeTableRow();
            displayTable(searchList);  
        }
        // search & Text
        else if(searchText !=null &&  filterTarget !=null){
            FileManager file = new FileManager("Item.txt");
            ArrayList<String[]> searchList = file.searchData(searchTarget);
            ArrayList<String[]> filterList = file.filterData(2, filterTarget);
            ArrayList<String[]> resultList = new ArrayList<String[]>(); ;
            for(int i = 0; i<searchList.size();i++){
                for(int j = 0; j<filterList.size();j++){
                    if(Arrays.equals(searchList.get(i),filterList.get(j)) == true){
                        resultList.add(searchList.get(i));               
                    }
                }
            }
            removeTableRow();
            displayTable(resultList);
        }
        else{
            FileManager file = new FileManager("Item.txt");
            ArrayList<String[]> searchList = file.searchData(searchTarget);
            removeTableRow();
            displayTable(searchList); 
        } 
    }//GEN-LAST:event_findButtonActionPerformed

    private void SupplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupplierComboBoxActionPerformed

        if(supplierIDList[SupplierComboBox.getSelectedIndex()].equals("All")){
            removeTableRow();
            displayTable();
        }    
        else{
            String filterTarget = supplierIDList[SupplierComboBox.getSelectedIndex()];
            FileManager filterSupplier = new FileManager("Item.txt");
            ArrayList<String[]> SupplierItem = filterSupplier.filterData(5, filterTarget);
            removeTableRow();
            displayTable(SupplierItem);
        }
    }//GEN-LAST:event_SupplierComboBoxActionPerformed
    
    public String[] getSupplierIDFromFile(){
        FileManager getrow = new FileManager("Supplier.txt");
        ArrayList<String> rows =  getrow.readFile();
        String[] supplierIDList = new String[rows.size()+1];
        supplierIDList[0] = null;
        for(int i=0 ; i< rows.size();i++){
            String line = rows.get(i).toString();
            String[] data = line.split("\\|");
            supplierIDList[i+1]=data[0];
        }
        return supplierIDList;
    } 
    
    public void displayTable(ArrayList<String[]> itemData){
        //[{},{},{},....]
        //ArrayLIst with String Array
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        for(int i =0;i<itemData.size();i++){
            model.addRow(itemData.get(i));
        }
    }
    public void displayTable(){
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        FileManager getrow = new FileManager("Item.txt");
        ArrayList<String> rows =  getrow.readFile();
        for(int i=0 ; i< rows.size();i++){
            String line = rows.get(i).toString();
            String[] data = line.split("\\|");
            model.addRow(data);
        }
    }
    public void removeTableRow(){
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        int count = model.getRowCount();
        for (int i = count - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageItem_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageItem_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageItem_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageItem_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ManageItem_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> SupplierComboBox;
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JButton editButton;
    private javax.swing.JButton findButton;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel manageItemLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField searchText;
    // End of variables declaration//GEN-END:variables
}
